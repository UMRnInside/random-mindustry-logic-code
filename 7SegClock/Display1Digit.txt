# mlogex version: 0.0.5

:Start
# DigitIndex: position that stores the digit to be displayed
# LastDigitIndex: do "lazy" update, performance is slightly better
xlet DigitIndex = 10
xlet BaseX = 40
xlet BaseY = 0
xlet DrawStartX = BaseX + 4
xlet DrawStartY = BaseY + 4
xlet LastDigitIndex = DigitIndex + 6

:Workloop
read num cell1 DigitIndex
read LastDigit cell1 LastDigitIndex
jump-if Workloop num == LastDigit
write num cell1 LastDigitIndex

xdraw color rgb=0x373737
xdraw rect x=BaseX y=BaseY width=40 height=80
xdraw color rgb=0xFF5252
read DrawingMask cell1 num
__unsafe_call DrawSevenSegment
drawflush display1
jump-if Workloop cell1 != null
end

# 7-segment display drawing, with 40px width, 80px height and 4px margin.
# Arguments:
# DrawingRom: a memory cell, store data involved in 7-segment display control
# DrawStartX, DrawStartY: start position of numbers
# DrawingMask: a mask, max 0x7F
# 7-segment order: https://zh.wikipedia.org/wiki/File:7_segment_display_labeled.svg
:DrawSevenSegment

:DrawA
xlet _SMask = 1 << 0
xlet _SMatch = DrawingMask & _SMask
jump-if DrawB _SMatch == 0
xlet SegmentStartX = 4 + DrawStartX
xlet SegmentStartY = 65 + DrawStartY
__unsafe_call DrawHorizonalSegment

:DrawB
xlet _SMask = 1 << 1
xlet _SMatch = DrawingMask & _SMask
jump-if DrawC _SMatch == 0
xlet SegmentStartX = 25 + DrawStartX
xlet SegmentStartY = 37 + DrawStartY
__unsafe_call DrawVerticalSegment

:DrawC
xlet _SMask = 1 << 2
xlet _SMatch = DrawingMask & _SMask
jump-if DrawD _SMatch == 0
xlet SegmentStartX = 25 + DrawStartX
xlet SegmentStartY = 4 + DrawStartY
__unsafe_call DrawVerticalSegment

:DrawD
xlet _SMask = 1 << 3
xlet _SMatch = DrawingMask & _SMask
jump-if DrawE _SMatch == 0
xlet SegmentStartX = 4 + DrawStartX
xlet SegmentStartY = 0 + DrawStartY
__unsafe_call DrawHorizonalSegment

:DrawE
xlet _SMask = 1 << 4
xlet _SMatch = DrawingMask & _SMask
jump-if DrawF _SMatch == 0
xlet SegmentStartX = 0 + DrawStartX
xlet SegmentStartY = 4 + DrawStartY
__unsafe_call DrawVerticalSegment

:DrawF
xlet _SMask = 1 << 5
xlet _SMatch = DrawingMask & _SMask
jump-if DrawG _SMatch == 0
xlet SegmentStartX = 0 + DrawStartX
xlet SegmentStartY = 37 + DrawStartY
__unsafe_call DrawVerticalSegment

:DrawG
xlet _SMask = 1 << 6
xlet _SMatch = DrawingMask & _SMask
jump-if DrawNumberEnd _SMatch == 0
xlet SegmentStartX = 4 + DrawStartX
xlet SegmentStartY = 33 + DrawStartY
__unsafe_call DrawHorizonalSegment

:DrawNumberEnd
__unsafe_return DrawSevenSegment


# Draw 6x(3+24+3) segment
# Arguments:
# SegmentStartX, SegmentStartY
:DrawVerticalSegment
# xlet DrawRectW = 6
# xlet DrawRectH = 24
# xlet DrawRectX1 = 0 + SegmentStartX
xlet DrawRectY1 = 3 + SegmentStartY
xlet DrawRectX2 = 6 + SegmentStartX
xlet DrawRectY2 = 27 + SegmentStartY
xlet DrawCentralX = 3 + SegmentStartX
xlet DrawTopY = 30 + SegmentStartY
xdraw rect x=SegmentStartX y=DrawRectY1 width=6 height=24
xdraw triangle x1=SegmentStartX y1=DrawRectY1 x2=DrawRectX2 y2=DrawRectY1 x3=DrawCentralX y3=SegmentStartY
xdraw triangle x1=SegmentStartX y1=DrawRectY2 x2=DrawRectX2 y2=DrawRectY2 x3=DrawCentralX y3=DrawTopY
__unsafe_return DrawVerticalSegment

# Draw (3+16+3)x6 segment, tuned for logic display
# Arguments:
# SegmentStartX, SegmentStartY
:DrawHorizonalSegment
# xlet DrawRectW = 17
# xlet DrawRectH = 6
xlet DrawRectX1 = 3 + SegmentStartX
# xlet DrawRectY1 = 0 + SegmentStartY
xlet DrawRectX2 = 20 + SegmentStartX
xlet DrawRectY2 = 6 + SegmentStartY
xlet DrawRightX = 23 + SegmentStartX
xlet DrawCentralY = 3 + SegmentStartY
xdraw rect x1=DrawRectX1 y1=SegmentStartY width=17 height=6
xdraw triangle x1=DrawRectX1 y1=SegmentStartY x2=DrawRectX1 y2=DrawRectY2 x3=SegmentStartX y3=DrawCentralY
xdraw triangle x1=DrawRectX2 y1=SegmentStartY x2=DrawRectX2 y2=DrawRectY2 x3=DrawRightX y3=DrawCentralY
__unsafe_return DrawHorizonalSegment
